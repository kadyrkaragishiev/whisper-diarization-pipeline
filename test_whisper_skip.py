#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞—á–∞–ª–∞ –∞—É–¥–∏–æ –≤ Whisper
"""

import sys
from main import AudioProcessor
from pathlib import Path

def test_audio_file(audio_path: str, models_to_test: list = None):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞—á–∞–ª–∞ –∞—É–¥–∏–æ —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
    """
    if models_to_test is None:
        models_to_test = ['tiny', 'base', 'small', 'medium']
    
    audio_path = Path(audio_path)
    if not audio_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
        return
    
    print(f"üéµ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: {audio_path}")
    print(f"üìä –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {', '.join(models_to_test)}")
    print("=" * 60)
    
    results = {}
    
    for model_name in models_to_test:
        print(f"\nüß† –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: {model_name}")
        print("-" * 40)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª—å—é
            processor = AudioProcessor(whisper_model=model_name)
            
            # –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
            print("üìù –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:")
            simple_result = processor.whisper_model.transcribe(
                str(audio_path),
                language="ru",
                word_timestamps=True
            )
            
            simple_segments = simple_result.get('segments', [])
            simple_start = simple_segments[0]['start'] if simple_segments else 0
            
            print(f"   üïí –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {simple_start:.1f}—Å")
            print(f"   üìä –°–µ–≥–º–µ–Ω—Ç–æ–≤: {len(simple_segments)}")
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è (–Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–±)
            print("üîß –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:")
            improved_result = processor.transcribe(str(audio_path))
            
            improved_segments = improved_result.get('segments', [])
            improved_start = improved_segments[0]['start'] if improved_segments else 0
            
            print(f"   üïí –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {improved_start:.1f}—Å")
            print(f"   üìä –°–µ–≥–º–µ–Ω—Ç–æ–≤: {len(improved_segments)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results[model_name] = {
                'simple_start': simple_start,
                'improved_start': improved_start,
                'simple_segments': len(simple_segments),
                'improved_segments': len(improved_segments),
                'has_skip_issue': simple_start > 5.0 or improved_start > 5.0
            }
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
            if simple_start > improved_start:
                improvement = simple_start - improved_start
                print(f"   ‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ: –Ω–∞ {improvement:.1f}—Å —Ä–∞–Ω—å—à–µ!")
            elif improved_start > simple_start:
                degradation = improved_start - simple_start
                print(f"   ‚ö†Ô∏è  –£—Ö—É–¥—à–µ–Ω–∏–µ: –Ω–∞ {degradation:.1f}—Å –ø–æ–∑–∂–µ")
            else:
                print("   ‚ûñ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            results[model_name] = {'error': str(e)}
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó")
    print("=" * 60)
    
    for model_name, result in results.items():
        if 'error' in result:
            print(f"‚ùå {model_name}: {result['error']}")
        else:
            simple_start = result['simple_start']
            improved_start = result['improved_start']
            
            status = ""
            if simple_start > 10.0:
                status += "üö® –°–ï–†–¨–ï–ó–ù–ê–Ø –ü–†–û–ë–õ–ï–ú–ê "
            elif simple_start > 5.0:
                status += "‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê "
            else:
                status += "‚úÖ –û–ö "
            
            print(f"{status} {model_name}:")
            print(f"   –ü—Ä–æ—Å—Ç–∞—è: {simple_start:.1f}—Å | –£–ª—É—á—à–µ–Ω–Ω–∞—è: {improved_start:.1f}—Å")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    problematic_models = [name for name, result in results.items() 
                         if 'error' not in result and result['has_skip_issue']]
    
    if problematic_models:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(problematic_models)}")
        print("üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å 'base' –≤–º–µ—Å—Ç–æ 'small' –∏–ª–∏ 'medium'")
        print("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π initial_prompt=''")
        print("   ‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å no_speech_threshold –¥–æ 0.2-0.3")
        print("   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å condition_on_previous_text=False")
    else:
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_whisper_skip.py <–ø—É—Ç—å_–∫_–∞—É–¥–∏–æ>")
        print("–ü—Ä–∏–º–µ—Ä: python test_whisper_skip.py input/1.m4a")
        sys.exit(1)
    
    audio_file = sys.argv[1]
    
    # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    models = ['base', 'small', 'medium'] if len(sys.argv) < 3 else sys.argv[2].split(',')
    
    test_audio_file(audio_file, models) 
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–∞–π–ø–ª–∞–π–Ω–∞
"""

import sys
import os
import tempfile
import numpy as np
import soundfile as sf
from pathlib import Path

def create_test_audio():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ —Å –¥–≤—É–º—è "—Å–ø–∏–∫–µ—Ä–∞–º–∏"
    duration = 10  # —Å–µ–∫—É–Ω–¥
    sample_rate = 16000
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–æ–Ω–∞ (–∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤)
    t = np.linspace(0, duration, int(sample_rate * duration))
    
    # –°–ø–∏–∫–µ—Ä 1: —á–∞—Å—Ç–æ—Ç–∞ 440 Hz (–ø–µ—Ä–≤—ã–µ 5 —Å–µ–∫—É–Ω–¥)
    speaker1 = np.sin(2 * np.pi * 440 * t[:len(t)//2]) * 0.3
    
    # –°–ø–∏–∫–µ—Ä 2: —á–∞—Å—Ç–æ—Ç–∞ 880 Hz (–≤—Ç–æ—Ä—ã–µ 5 —Å–µ–∫—É–Ω–¥) 
    speaker2 = np.sin(2 * np.pi * 880 * t[len(t)//2:]) * 0.3
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º
    audio = np.concatenate([speaker1, speaker2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ input/
    input_dir = Path("input")
    input_dir.mkdir(exist_ok=True)
    
    test_file = input_dir / "test_audio.wav"
    sf.write(test_file, audio, sample_rate)
    
    return test_file

def main():
    print("üß™ –¢–µ—Å—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞ Whisper + PyAnnote Audio")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
    if not Path("main.py").exists():
        print("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
    print("üîä –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª...")
    test_file = create_test_audio()
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {test_file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import whisper
        import torch
        print("‚úÖ Whisper —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        try:
            from pyannote.audio import Pipeline
            print("‚úÖ PyAnnote Audio —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print("‚ö†Ô∏è  PyAnnote Audio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–æ–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        if torch.cuda.is_available():
            device = "cuda"
        elif hasattr(torch.backends, 'mps') and torch.backends.mps.is_available():
            device = "mps"
        else:
            device = "cpu"
        
        print(f"üîß –î–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å Whisper
        print("üì• –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ Whisper...")
        model = whisper.load_model("tiny", device=device)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º tiny –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        print("‚úÖ –ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        print("\nüéØ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print(f"python main.py {test_file} --model tiny")
        print("\nüí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å HuggingFace —Ç–æ–∫–µ–Ω!")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        sys.exit(1)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–∞–π–ø–ª–∞–π–Ω–∞
"""

import sys
import os
import tempfile
import numpy as np
import soundfile as sf
from pathlib import Path

def create_test_audio():
    """–°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –¥–≤—É–º—è —Å–ø–∏–∫–µ—Ä–∞–º–∏"""
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∞—É–¥–∏–æ —Å –¥–≤—É–º—è —Ä–∞–∑–Ω—ã–º–∏ "—Å–ø–∏–∫–µ—Ä–∞–º–∏"
    duration = 15  # —Å–µ–∫—É–Ω–¥
    sample_rate = 16000
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö —Å–ø–∏–∫–µ—Ä–æ–≤
    t = np.linspace(0, duration, int(sample_rate * duration))
    
    # –°–ø–∏–∫–µ—Ä 1: –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π —Ç–æ–Ω —Å –º–æ–¥—É–ª—è—Ü–∏–µ–π (0-4 —Å–µ–∫—É–Ω–¥—ã)
    segment1_duration = 4
    t1 = t[:int(segment1_duration * sample_rate)]
    speaker1_part1 = (np.sin(2 * np.pi * 300 * t1) + 
                      0.3 * np.sin(2 * np.pi * 450 * t1) +
                      0.1 * np.sin(2 * np.pi * 150 * t1)) * 0.3
    
    # –ü–∞—É–∑–∞ (4-5 —Å–µ–∫—É–Ω–¥)
    pause1_duration = 1
    pause1 = np.zeros(int(pause1_duration * sample_rate))
    
    # –°–ø–∏–∫–µ—Ä 2: –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —Ç–æ–Ω (5-9 —Å–µ–∫—É–Ω–¥) 
    segment2_duration = 4
    t2 = t[int(5 * sample_rate):int(9 * sample_rate)]
    speaker2_part1 = (np.sin(2 * np.pi * 600 * t2) + 
                      0.2 * np.sin(2 * np.pi * 800 * t2) +
                      0.15 * np.sin(2 * np.pi * 400 * t2)) * 0.3
    
    # –ü–∞—É–∑–∞ (9-10 —Å–µ–∫—É–Ω–¥)
    pause2_duration = 1
    pause2 = np.zeros(int(pause2_duration * sample_rate))
    
    # –°–ø–∏–∫–µ—Ä 1 —Å–Ω–æ–≤–∞ (10-14 —Å–µ–∫—É–Ω–¥)
    segment3_duration = 4
    t3 = t[int(10 * sample_rate):int(14 * sample_rate)]
    speaker1_part2 = (np.sin(2 * np.pi * 280 * t3) + 
                      0.35 * np.sin(2 * np.pi * 420 * t3) +
                      0.12 * np.sin(2 * np.pi * 140 * t3)) * 0.3
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
    final_pause = np.zeros(int(1 * sample_rate))
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
    audio = np.concatenate([
        speaker1_part1,  # 0-4—Å: –°–ø–∏–∫–µ—Ä 1
        pause1,          # 4-5—Å: –ü–∞—É–∑–∞
        speaker2_part1,  # 5-9—Å: –°–ø–∏–∫–µ—Ä 2  
        pause2,          # 9-10—Å: –ü–∞—É–∑–∞
        speaker1_part2,  # 10-14—Å: –°–ø–∏–∫–µ—Ä 1
        final_pause      # 14-15—Å: –ü–∞—É–∑–∞
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫–∏–π —à—É–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    noise = np.random.normal(0, 0.01, len(audio))
    audio = audio + noise
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ input/
    input_dir = Path("input")
    input_dir.mkdir(exist_ok=True)
    
    test_file = input_dir / "test_diarization.wav"
    sf.write(test_file, audio, sample_rate)
    
    return test_file

def main():
    print("üß™ –¢–µ—Å—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞ Whisper + PyAnnote Audio")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
    if not Path("main.py").exists():
        print("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
    print("üîä –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª...")
    test_file = create_test_audio()
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {test_file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import whisper
        import torch
        print("‚úÖ Whisper —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        try:
            from pyannote.audio import Pipeline
            print("‚úÖ PyAnnote Audio —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print("‚ö†Ô∏è  PyAnnote Audio –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–æ–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        if torch.cuda.is_available():
            device = "cuda"
        elif hasattr(torch.backends, 'mps') and torch.backends.mps.is_available():
            device = "mps"
        else:
            device = "cpu"
        
        print(f"üîß –î–æ—Å—Ç—É–ø–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å Whisper
        print("üì• –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏ Whisper...")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è Whisper —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å MPS –≤ –≤–µ—Ä—Å–∏–∏ 20240930
        model = whisper.load_model("tiny", device="cpu")  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU
        print("‚úÖ –ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (–Ω–∞ CPU)")
        
        print("\nüéØ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print(f"python main.py {test_file} --model tiny")
        print("\nüí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å HuggingFace —Ç–æ–∫–µ–Ω!")
        print("\n‚ö†Ô∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Whisper v20240930 –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å MPS –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö Mac,")
        print("    –ø–æ—ç—Ç–æ–º—É —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ CPU. –í –æ—Å–Ω–æ–≤–Ω–æ–º –ø–∞–π–ø–ª–∞–π–Ω–µ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å MPS.")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        sys.exit(1)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 
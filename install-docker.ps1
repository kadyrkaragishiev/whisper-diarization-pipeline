# Docker and NVIDIA GPU Setup for Windows
# PowerShell script for Windows installation

param(
    [switch]$Force,
    [switch]$SkipNvidia
)

# Check if running as administrator
function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

function Write-ColorOutput {
    param([string]$Text, [string]$Color = "White")
    
    $colors = @{
        "Red" = "Red"
        "Green" = "Green" 
        "Yellow" = "Yellow"
        "Blue" = "Cyan"
        "Purple" = "Magenta"
    }
    
    Write-Host $Text -ForegroundColor $colors[$Color]
}

Write-ColorOutput "üê≥ Docker and NVIDIA GPU Setup for Windows" "Blue"
Write-ColorOutput "===========================================" "Blue"

# Check administrator privileges
if (-not (Test-Administrator)) {
    Write-ColorOutput "‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" "Red"
    Write-ColorOutput "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ PowerShell –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞" "Yellow"
    exit 1
}

# Check Windows version
$osVersion = [System.Environment]::OSVersion.Version
if ($osVersion.Major -lt 10) {
    Write-ColorOutput "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Windows 10 –∏–ª–∏ –Ω–æ–≤–µ–µ" "Red"
    exit 1
}

Write-ColorOutput "‚úÖ Windows $($osVersion.Major).$($osVersion.Minor) –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞" "Green"

# Function to check if WSL is available
function Test-WSL {
    try {
        $wslInfo = wsl --status 2>$null
        return $true
    } catch {
        return $false
    }
}

# Function to install WSL2
function Install-WSL2 {
    Write-ColorOutput "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WSL2..." "Blue"
    
    # Enable WSL feature
    dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
    dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
    
    # Download and install WSL2 kernel update
    $wslUpdateUrl = "https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi"
    $wslUpdatePath = "$env:TEMP\wsl_update_x64.msi"
    
    Write-ColorOutput "üì• –°–∫–∞—á–∏–≤–∞–µ–º WSL2 kernel update..." "Blue"
    Invoke-WebRequest -Uri $wslUpdateUrl -OutFile $wslUpdatePath
    
    Write-ColorOutput "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WSL2 kernel update..." "Blue"
    Start-Process msiexec.exe -Wait -ArgumentList "/i $wslUpdatePath /quiet"
    
    # Set WSL2 as default
    wsl --set-default-version 2
    
    Write-ColorOutput "‚úÖ WSL2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "Green"
    Write-ColorOutput "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ubuntu –∏–∑ Microsoft Store –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏" "Yellow"
}

# Function to install Docker Desktop
function Install-DockerDesktop {
    Write-ColorOutput "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Desktop..." "Blue"
    
    # Try winget first
    if (Get-Command winget -ErrorAction SilentlyContinue) {
        Write-ColorOutput "üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º winget –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏..." "Blue"
        try {
            winget install Docker.DockerDesktop --accept-package-agreements --accept-source-agreements
            Write-ColorOutput "‚úÖ Docker Desktop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ winget" "Green"
            return
        } catch {
            Write-ColorOutput "‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ winget, –ø—Ä–æ–±—É–µ–º –≤—Ä—É—á–Ω—É—é..." "Yellow"
        }
    }
    
    # Manual download and install
    $dockerUrl = "https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe"
    $dockerPath = "$env:TEMP\DockerDesktopInstaller.exe"
    
    Write-ColorOutput "üì• –°–∫–∞—á–∏–≤–∞–µ–º Docker Desktop..." "Blue"
    Invoke-WebRequest -Uri $dockerUrl -OutFile $dockerPath
    
    Write-ColorOutput "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Desktop..." "Blue"
    Start-Process $dockerPath -Wait -ArgumentList "install --quiet"
    
    Write-ColorOutput "‚úÖ Docker Desktop —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "Green"
}

# Function to check NVIDIA GPU
function Test-NvidiaGPU {
    try {
        $nvidiaInfo = nvidia-smi 2>$null
        return $true
    } catch {
        return $false
    }
}

# Function to install NVIDIA drivers
function Install-NvidiaDrivers {
    Write-ColorOutput "üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ NVIDIA GPU..." "Blue"
    
    if (Test-NvidiaGPU) {
        Write-ColorOutput "‚úÖ NVIDIA –¥—Ä–∞–π–≤–µ—Ä—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" "Green"
        nvidia-smi
        return
    }
    
    Write-ColorOutput "‚ö†Ô∏è  NVIDIA –¥—Ä–∞–π–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" "Yellow"
    Write-ColorOutput "üí° –°–∫–∞—á–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã —Å https://www.nvidia.com/drivers" "Yellow"
    Write-ColorOutput "üí° –î–ª—è RTX 3080 –≤—ã–±–µ—Ä–∏—Ç–µ GeForce RTX 30 Series" "Yellow"
    
    $openBrowser = Read-Host "–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–æ–≤? (y/N)"
    if ($openBrowser -eq "y" -or $openBrowser -eq "Y") {
        Start-Process "https://www.nvidia.com/drivers"
    }
}

# Main installation flow
Write-ColorOutput "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É..." "Blue"

# Step 1: Check and install WSL2
Write-ColorOutput "üìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ WSL2..." "Blue"
if (-not (Test-WSL)) {
    if ($Force -or (Read-Host "WSL2 –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/N)") -eq "y") {
        Install-WSL2
        $needReboot = $true
    }
} else {
    Write-ColorOutput "‚úÖ WSL2 —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "Green"
}

# Step 2: Install Docker Desktop
Write-ColorOutput "üìã –®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Desktop..." "Blue"
if (-not (Get-Command docker -ErrorAction SilentlyContinue)) {
    if ($Force -or (Read-Host "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker Desktop? (y/N)") -eq "y") {
        Install-DockerDesktop
        $needReboot = $true
    }
} else {
    Write-ColorOutput "‚úÖ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" "Green"
    docker --version
}

# Step 3: NVIDIA GPU setup
if (-not $SkipNvidia) {
    Write-ColorOutput "üìã –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ NVIDIA GPU..." "Blue"
    Install-NvidiaDrivers
}

# Step 4: Create project directories
Write-ColorOutput "üìã –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞..." "Blue"
$projectDirs = @("input", "output", "models")
foreach ($dir in $projectDirs) {
    if (-not (Test-Path $dir)) {
        New-Item -ItemType Directory -Path $dir -Force | Out-Null
        Write-ColorOutput "‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $dir" "Green"
    }
}

# Step 5: Setup environment file
Write-ColorOutput "üìã –®–∞–≥ 5: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..." "Blue"
if (-not (Test-Path ".env")) {
    if (Test-Path "env.example") {
        Copy-Item "env.example" ".env"
        Write-ColorOutput "‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env –∏–∑ —à–∞–±–ª–æ–Ω–∞" "Green"
        Write-ColorOutput "üí° –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env –∏ –¥–æ–±–∞–≤—å—Ç–µ HUGGINGFACE_TOKEN" "Yellow"
    }
}

# Final instructions
Write-ColorOutput "" "White"
Write-ColorOutput "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" "Green"
Write-ColorOutput "" "White"

if ($needReboot) {
    Write-ColorOutput "üí° –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞" "Yellow"
    Write-ColorOutput "üí° –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏:" "Yellow"
    Write-ColorOutput "   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop" "Blue"
    Write-ColorOutput "   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ubuntu –∏–∑ Microsoft Store" "Blue"
    Write-ColorOutput "   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./run.sh your_audio.wav" "Blue"
    
    $rebootNow = Read-Host "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–π—á–∞—Å? (y/N)"
    if ($rebootNow -eq "y" -or $rebootNow -eq "Y") {
        Restart-Computer -Force
    }
} else {
    Write-ColorOutput "üí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" "Yellow"
    Write-ColorOutput "   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop" "Blue"
    Write-ColorOutput "   2. –ü–æ–º–µ—Å—Ç–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ input/" "Blue" 
    Write-ColorOutput "   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./run.sh your_audio.wav" "Blue"
}

Write-ColorOutput "" "White"
Write-ColorOutput "üöÄ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!" "Purple" 
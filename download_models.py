#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª–∏ –æ–¥–∏–Ω —Ä–∞–∑ —Å —Ç–æ–∫–µ–Ω–æ–º, –∞ –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
"""

import os
import sys
import shutil
from pathlib import Path
from typing import Optional

import click
import torch
from pyannote.audio import Pipeline
import whisper

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É transformers –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
try:
    from transformers import AutoModelForSpeechSeq2Seq, AutoProcessor
    HF_TRANSFORMERS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è  transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–æ–¥–µ–ª–∏ HF –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    HF_TRANSFORMERS_AVAILABLE = False


class ModelDownloader:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self, models_dir: str = "models"):
        self.models_dir = Path(models_dir)
        self.models_dir.mkdir(exist_ok=True)
        
        # –ü–∞–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–æ–¥–µ–ª–µ–π
        self.whisper_dir = self.models_dir / "whisper"
        self.pyannote_dir = self.models_dir / "pyannote"
        self.custom_whisper_dir = self.models_dir / "custom_whisper"
        
        self.whisper_dir.mkdir(exist_ok=True)
        self.pyannote_dir.mkdir(exist_ok=True)
        self.custom_whisper_dir.mkdir(exist_ok=True)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        self.device = torch.device("cpu")
    
    def download_whisper_models(self, models: list = None):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π Whisper"""
        if models is None:
            models = ["tiny", "base", "small", "medium", "large"]
        
        print("üì• –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏ Whisper...")
        
        for model_name in models:
            try:
                print(f"‚¨áÔ∏è  –°–∫–∞—á–∏–≤–∞–µ–º {model_name}...")
                model = whisper.load_model(model_name, device=self.device)
                print(f"‚úÖ {model_name} —Å–∫–∞—á–∞–Ω–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {model_name}: {e}")
    
    def download_custom_whisper_model(self, model_id: str, local_name: Optional[str] = None):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏ Whisper –∏–∑ HuggingFace"""
        if not HF_TRANSFORMERS_AVAILABLE:
            print("‚ùå transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install transformers")
            return False
        
        print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –º–æ–¥–µ–ª—å Whisper: {model_id}")
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            save_name = local_name or model_id.replace("/", "_")
            save_path = self.custom_whisper_dir / save_name
            
            print(f"‚¨áÔ∏è  –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...")
            model = AutoModelForSpeechSeq2Seq.from_pretrained(
                model_id,
                torch_dtype=torch.float32,
                low_cpu_mem_usage=True,
                use_safetensors=True
            )
            
            print(f"‚¨áÔ∏è  –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä...")
            processor = AutoProcessor.from_pretrained(model_id)
            
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤: {save_path}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            model.save_pretrained(save_path)
            processor.save_pretrained(save_path)
            
            print(f"‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {save_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    def copy_local_custom_model(self, source_path: str, model_name: str):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ –∫–µ—à"""
        source = Path(source_path)
        if not source.exists():
            print(f"‚ùå –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_path}")
            return False
        
        dest_path = self.custom_whisper_dir / model_name
        
        try:
            print(f"üìÅ –ö–æ–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ {source} –≤ {dest_path}")
            
            if dest_path.exists():
                shutil.rmtree(dest_path)
            
            shutil.copytree(source, dest_path)
            
            print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: {dest_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    def list_custom_models(self):
        """–°–ø–∏—Å–æ–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –∫–µ—à–µ"""
        if not self.custom_whisper_dir.exists():
            print("üìÅ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
        
        models = []
        for model_dir in self.custom_whisper_dir.iterdir():
            if model_dir.is_dir() and (model_dir / "config.json").exists():
                models.append(model_dir.name)
        
        if models:
            print("üìã –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –∫–µ—à–µ:")
            for model in models:
                print(f"  ‚Ä¢ {model}")
        else:
            print("üìÅ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return models
    
    def download_pyannote_model(self, hf_token: str, model_name: str = "pyannote/speaker-diarization-3.1"):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ PyAnnote"""
        print(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {model_name}")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å —Å —Ç–æ–∫–µ–Ω–æ–º
            pipeline = Pipeline.from_pretrained(model_name, use_auth_token=hf_token)
            pipeline.to(self.device)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞ –Ω—É–∂–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
            # pipeline.save_pretrained(local_path)  # –£–¥–∞–ª–µ–Ω–æ, –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ pyannote.audio")
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
            config_path = self.pyannote_dir / "config.yaml"
            with open(config_path, 'w') as f:
                f.write(f"model_name: {model_name}\n")
                f.write(f"device: {self.device}\n")
            print(f"üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {config_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª–∏")
            return False
        return True
    
    def create_local_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        config = {
            "whisper_cache": str(Path.home() / ".cache" / "whisper"),
            "pyannote_model": str(self.pyannote_dir / "speaker-diarization-3.1"),
            "use_local_models": True,
            "device": str(self.device)
        }
        
        config_file = self.models_dir / "local_config.json"
        import json
        with open(config_file, 'w') as f:
            json.dump(config, f, indent=2)
        
        print(f"üìù –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {config_file}")
        return config_file


@click.command()
@click.option('--hf-token', envvar='HUGGINGFACE_TOKEN', 
              help='HuggingFace —Ç–æ–∫–µ–Ω (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è)')
@click.option('--models-dir', default='models', 
              help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π')
@click.option('--whisper-models', default='tiny,base,small,medium,large',
              help='–ú–æ–¥–µ–ª–∏ Whisper –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
@click.option('--skip-whisper', is_flag=True, 
              help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π Whisper')
@click.option('--skip-pyannote', is_flag=True,
              help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ PyAnnote')
@click.option('--custom-whisper-model', 
              help='ID –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏ Whisper –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, antony66/whisper-large-v3-russian)')
@click.option('--custom-model-name',
              help='–õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ ID)')
@click.option('--copy-local-model',
              help='–ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–µ—à')
@click.option('--local-model-name', default='whisper-large-v3-russian',
              help='–ò–º—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏')
@click.option('--list-custom', is_flag=True,
              help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ –∫–µ—à–µ')
def main(hf_token: Optional[str], models_dir: str, whisper_models: str, 
         skip_whisper: bool, skip_pyannote: bool, custom_whisper_model: Optional[str],
         custom_model_name: Optional[str], copy_local_model: Optional[str],
         local_model_name: str, list_custom: bool):
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ñ–ª–∞–π–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    
    print("üì¶ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {models_dir}")
    
    downloader = ModelDownloader(models_dir)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    if list_custom:
        downloader.list_custom_models()
        return
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏
    if copy_local_model:
        success = downloader.copy_local_custom_model(copy_local_model, local_model_name)
        if success:
            print(f"\n‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!")
            print(f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py input.wav --custom-model {models_dir}/custom_whisper/{local_model_name}")
        return
    
    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–æ–¥–µ–ª–∏ Whisper
    if custom_whisper_model:
        if not HF_TRANSFORMERS_AVAILABLE:
            print("‚ùå –î–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω—É–∂–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ transformers")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install transformers")
            sys.exit(1)
        
        success = downloader.download_custom_whisper_model(custom_whisper_model, custom_model_name)
        if success:
            model_name = custom_model_name or custom_whisper_model.replace("/", "_")
            print(f"\n‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å —Å–∫–∞—á–∞–Ω–∞!")
            print(f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py input.wav --custom-model {models_dir}/custom_whisper/{model_name}")
        return
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏ Whisper
    if not skip_whisper:
        models_list = [m.strip() for m in whisper_models.split(',')]
        downloader.download_whisper_models(models_list)
    else:
        print("‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ Whisper –º–æ–¥–µ–ª–µ–π")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å PyAnnote
    if not skip_pyannote:
        if not hf_token:
            print("‚ùå HuggingFace —Ç–æ–∫–µ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: export HUGGINGFACE_TOKEN=your_token")
            print("üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --skip-pyannote")
            sys.exit(1)
        
        success = downloader.download_pyannote_model(hf_token)
        if not success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏")
            sys.exit(1)
    else:
        print("‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ PyAnnote –º–æ–¥–µ–ª–∏")
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_file = downloader.create_local_config()
    
    print("\n‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–π–ø–ª–∞–π–Ω –±–µ–∑ —Ç–æ–∫–µ–Ω–∞:")
    print(f"python main.py input/audio.wav --local-models {models_dir}")
    print("\nüí° –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã:")
    print(f"export LOCAL_MODELS_DIR={models_dir}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–æ–¥–µ–ª–∏
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    downloader.list_custom_models()


if __name__ == "__main__":
    main() 